server {
    {{ if bool (env.Getenv "SHELLHUB_PROXY") }}
    set_real_ip_from ::/0;
    real_ip_header proxy_protocol;
    {{ end }}
    server_name {{ (env.Getenv "SHELLHUB_DOMAIN") }};
    resolver {{ (env.Getenv "SHELLHUB_RESOLVER") }} ipv6=off;

    # Load configuration files for the default server block
    include /etc/nginx/default.d/*.conf;

    location / {
        set $upstream ui.shellhub.svc.cluster.local:8080;

        add_header Cache-Control "no-cache, no-store";
        add_header Pragma "no-cache";

        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /api {
        set $upstream api.shellhub.svc.cluster.local:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_set_header X-ID $id;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Role $role;
        proxy_pass http://$upstream;
    }

    location ~ ^/(install.sh|kickstart.sh)$ {
        set $upstream api.shellhub.svc.cluster.local:8080;
        rewrite ^/(.*)$ /api/install break;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_pass http://$upstream;
    }

    location /api/auth/user {
        set $upstream api.shellhub.svc.cluster.local:8080;

        auth_request /auth/skip;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_set_header X-ID $id;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Role $role;
        proxy_pass http://$upstream;
    }

    {{ if eq (env.Getenv "SHELLHUB_ENV") "development" -}}
    location /openapi/preview {
        set $upstream openapi.shellhub.svc.cluster.local:8080;
        rewrite ^/openapi/preview/?(.*)$ /$1 break;
        proxy_pass http://$upstream;
    }

    location /openapi/mock {
        set $upstream openapi.shellhub.svc.cluster.local:4010;
        rewrite ^/openapi/mock/?(.*)$ /$1 break;
        proxy_pass http://$upstream;
    }

    location /openapi/proxy {
        set $upstream openapi.shellhub.svc.cluster.local:4020;
        rewrite ^/openapi/proxy/?(.*)$ /$1 break;
        proxy_pass http://$upstream;
    }
    {{- end }}

    location /ssh/connection {
        set $upstream ssh.shellhub.svc.cluster.local:8080;
        auth_request /auth;
        auth_request_set $device_uid $upstream_http_x_device_uid;
        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_set_header X-Device-UID $device_uid;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /ssh/revdial {
        set $upstream ssh.shellhub.svc.cluster.local:8080;
        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /ssh/auth {
        set $upstream api.shellhub.svc.cluster.local:8080;
        auth_request /auth;
        auth_request_set $device_uid $upstream_http_x_device_uid;
        error_page 500 =401 /auth;
        proxy_pass http://$upstream;
        proxy_set_header X-Device-UID $device_uid;
    }

    location ~* /api/sessions/(.*)/close {
        set $upstream ssh.shellhub.svc.cluster.local:8080;
        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Role $role;
        proxy_pass http://$upstream;
    }

    location /api/devices/auth {
        set $upstream api.shellhub.svc.cluster.local:8080;
        auth_request off;
        rewrite ^/api/(.*)$ /api/$1 break;
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_pass http://$upstream;
    }

    location /api/login {
        set $upstream api.shellhub.svc.cluster.local:8080;
        auth_request off;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_pass http://$upstream;
    }

    location /api/webhook-billing {
        set $upstream billing-api.shellhub.svc.cluster.local:8080;
        auth_request off;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_pass http://$upstream;
    }

    location /auth {
        set $upstream_auth api.shellhub.svc.cluster.local:8080;
        internal;
        rewrite ^/(.*)$ /internal/$1 break;
        proxy_pass http://$upstream_auth;
    }

    location /auth/skip {
        set $upstream_auth api.shellhub.svc.cluster.local:8080;
        internal;
        rewrite ^/auth/(.*)$ /internal/auth?args=$1 break;
        proxy_pass http://$upstream_auth;
    }

    location /ws {
        set $upstream ssh.shellhub.svc.cluster.local:8080;
        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;

        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /info {
        set $upstream api.shellhub.svc.cluster.local:8080;

        proxy_set_header Host $host;
        proxy_pass http://$upstream;
        rewrite ^/(.*)$ /api/info break;
    }

    location = /nginx_status {
        stub_status;
        allow 127.0.0.1;
        allow {{ env.Getenv "HOST_IP" }};
        deny all;
    }
}

{{- $PUBLIC_URL_DOMAIN := or (env.Getenv "SHELLHUB_PUBLIC_URL_DOMAIN") (env.Getenv "SHELLHUB_DOMAIN") }}
server {
    listen 80;
    server_name ~^(?<namespace>.+)\.(?<device>.+)\.{{ $PUBLIC_URL_DOMAIN }}$;
    resolver {{ (env.Getenv "SHELLHUB_RESOLVER") }} ipv6=off;
    location / {
        set $upstream ssh.shellhub.svc.cluster.local:8080;

        rewrite ^/(.*)$ /ssh/http break;
        proxy_set_header X-Public-URL-Address {{ $PUBLIC_URL_DOMAIN }};
        proxy_set_header X-Path /$1$is_args$args;
        proxy_pass http://$upstream;
    }
}
